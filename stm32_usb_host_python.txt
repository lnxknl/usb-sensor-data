[
{
"role": "user",
"content": "write a stm32f103c8t6 usb hid usage example for send sensor data like temperature to host"
},
{
"role": "assistant",
"content": "Here's an example of how to use STM32F103C8T6 to send temperature sensor data to a host computer using USB HID:

```c
#include \"stm32f1xx_hal.h\"
#include \"usbd_core.h\"
#include \"usbd_desc.h\"
#include \"usbd_hid.h\"

// HID report descriptor
__ALIGN_BEGIN static uint8_t HID_ReportDesc[33] __ALIGN_END = {
    0x05, 0x01,                    // USAGE_PAGE (Generic Desktop)
    0x09, 0x00,                    // USAGE (Undefined)
    0xa1, 0x01,                    // COLLECTION (Application)
    0x15, 0x00,                    //   LOGICAL_MINIMUM (0)
    0x26, 0xff, 0x00,              //   LOGICAL_MAXIMUM (255)
    0x75, 0x08,                    //   REPORT_SIZE (8)
    0x95, 0x04,                    //   REPORT_COUNT (4)
    0x09, 0x00,                    //   USAGE (Undefined)
    0x81, 0x82,                    //   INPUT (Data,Var,Abs,Vol)
    0xc0                           // END_COLLECTION
};

USBD_HandleTypeDef hUsbDeviceFS;

// Temperature sensor data structure
typedef struct {
    uint8_t header;
    uint8_t temp_integer;
    uint8_t temp_fraction;
    uint8_t checksum;
} TemperatureData;

TemperatureData tempData;

// Function prototypes
static void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USB_DEVICE_Init(void);
float readTemperature(void);

int main(void)
{
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_USB_DEVICE_Init();

    while (1)
    {
        float temperature = readTemperature();
        
        tempData.header = 0xAA;
        tempData.temp_integer = (uint8_t)temperature;
        tempData.temp_fraction = (uint8_t)((temperature - tempData.temp_integer) * 100);
        tempData.checksum = tempData.header ^ tempData.temp_integer ^ tempData.temp_fraction;

        USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&tempData, sizeof(tempData));
        
        HAL_Delay(1000); // Send data every second
    }
}

static void SystemClock_Config(void)
{
    // Configure system clock (use STM32CubeMX generated code)
}

static void MX_GPIO_Init(void)
{
    // Initialize GPIO (use STM32CubeMX generated code)
}

static void MX_USB_DEVICE_Init(void)
{
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
    {
        Error_Handler();
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
    {
        Error_Handler();
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
    {
        Error_Handler();
    }
}

float readTemperature(void)
{
    // Implement your temperature sensor reading logic here
    // This is just a placeholder that returns a dummy value
    static float temp = 25.0;
    temp += 0.1;
    return temp;
}

// Implement the following callback functions:
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
    // USB GPIO and clock initialization
}

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* hpcd)
{
    // USB GPIO and clock de-initialization
}

void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
    USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
}

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
    USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
}

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
    USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
}

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
    USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
}

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
    USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
    USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, USBD_SPEED_FULL);
}

void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
    USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
}

void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
    USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
}
```

This example demonstrates how to set up a USB HID device on the STM32F103C8T6 to send temperature sensor data to a host computer. Here's a breakdown of the key components:

1. We define a custom HID report descriptor that describes the data format we'll be sending.

2. We create a `TemperatureData` structure to hold our sensor data.

3. In the main loop, we:
   - Read the temperature (dummy function in this example)
   - Pack the data into our `TemperatureData` structure
   - Send the data using `USBD_HID_SendReport()`
   - Wait for 1 second before sending the next report

4. We implement necessary USB device callbacks to handle USB events.

To use this code:

1. Set up your project using STM32CubeMX, enabling USB and configuring the clock.

2. Implement the `readTemperature()` function to actually read from your temperature sensor.

3. Implement proper error handling and USB descriptor setup (not shown in this example for brevity).

4. On the host side, you'll need to write an application to receive and interpret the HID reports.

Remember to properly configure your USB descriptors and ensure your device is recognized as a HID device by the host computer. Also, make sure to include all necessary HAL and USB device libraries in your project."
},
{
"role": "user",
"content": "can you write the correspond host python script to received this sensor data"
},
{
"role": "assistant",
"content": "Certainly! Here's a Python script that can receive and interpret the sensor data sent by the STM32F103C8T6 USB HID device:

```python
import hid
import time
import struct

# USB VID and PID for your device
VID = 0x0483  # STM32 default VID
PID = 0x5750  # You should replace this with your actual PID

def find_device():
    device = hid.device()
    try:
        device.open(VID, PID)
        print(f\"Connected to {device.get_manufacturer_string()} {device.get_product_string()}\")
        return device
    except hid.HIDException:
        print(\"Unable to open device\")
        return None

def read_temperature(device):
    try:
        # Read 4 bytes of data
        data = device.read(4, timeout=1000)
        
        if data:
            header, temp_integer, temp_fraction, checksum = struct.unpack('BBBB', bytes(data))
            
            # Verify checksum
            if checksum == (header ^ temp_integer ^ temp_fraction):
                temperature = temp_integer + (temp_fraction / 100.0)
                print(f\"Temperature: {temperature:.2f}Â°C\")
            else:
                print(\"Checksum error\")
        else:
            print(\"No data received\")
    except Exception as e:
        print(f\"Error reading data: {str(e)}\")

def main():
    device = find_device()
    if device:
        print(\"Listening for temperature data...\")
        try:
            while True:
                read_temperature(device)
                time.sleep(1)  # Wait for 1 second before next read
        except KeyboardInterrupt:
            print(\"Stopping...\")
        finally:
            device.close()
    else:
        print(\"Device not found\")

if __name__ == \"__main__\":
    main()
```

To use this script:

1. Install the required library:
   ```
   pip install hidapi
   ```

2. Make sure you replace the `VID` and `PID` variables with the actual Vendor ID and Product ID of your STM32 device. The VID is likely correct for STM32, but you'll need to set the correct PID.

3. Run the script. It will attempt to connect to your device and then continuously read and display the temperature data.

This script does the following:

1. It uses the `hid` library to communicate with the USB HID device.

2. The `find_device()` function attempts to open a connection to the device with the specified VID and PID.

3. The `read_temperature()` function reads 4 bytes of data from the device, which corresponds to the `TemperatureData` structure we defined in the STM32 code.

4. It unpacks the received data, verifies the checksum, and then calculates and prints the temperature.

5. The main loop runs continuously, reading temperature data every second until the user interrupts the program.

Make sure your STM32 device is properly recognized by your operating system as a HID device. You may need to install drivers or adjust your device's USB descriptors if it's not recognized correctly.

Also, note that you may need to run this script with administrator/root privileges to access the USB device, depending on your operating system's settings."
},
{
"role": "user",
"content": "I want to add stm32 baord received message from host like turn on/off led, can you write the modfied code for me"
},
{
"role": "assistant",
"content": "Certainly! I'll modify both the STM32 code and the Python host script to add bidirectional communication. The STM32 will now be able to receive commands to turn an LED on or off.

First, let's modify the STM32 code:

```c
#include \"stm32f1xx_hal.h\"
#include \"usbd_core.h\"
#include \"usbd_desc.h\"
#include \"usbd_hid.h\"

// HID report descriptor for both input and output
__ALIGN_BEGIN static uint8_t HID_ReportDesc[41] __ALIGN_END = {
    0x05, 0x01,                    // USAGE_PAGE (Generic Desktop)
    0x09, 0x00,                    // USAGE (Undefined)
    0xa1, 0x01,                    // COLLECTION (Application)
    0x15, 0x00,                    //   LOGICAL_MINIMUM (0)
    0x26, 0xff, 0x00,              //   LOGICAL_MAXIMUM (255)
    0x75, 0x08,                    //   REPORT_SIZE (8)
    0x95, 0x04,                    //   REPORT_COUNT (4)
    0x09, 0x00,                    //   USAGE (Undefined)
    0x81, 0x82,                    //   INPUT (Data,Var,Abs,Vol)
    0x95, 0x01,                    //   REPORT_COUNT (1)
    0x09, 0x00,                    //   USAGE (Undefined)
    0x91, 0x82,                    //   OUTPUT (Data,Var,Abs,Vol)
    0xc0                           // END_COLLECTION
};

USBD_HandleTypeDef hUsbDeviceFS;

typedef struct {
    uint8_t header;
    uint8_t temp_integer;
    uint8_t temp_fraction;
    uint8_t checksum;
} TemperatureData;

TemperatureData tempData;

// LED GPIO Port and Pin
#define LED_GPIO_PORT GPIOC
#define LED_PIN GPIO_PIN_13

static void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USB_DEVICE_Init(void);
float readTemperature(void);

int main(void)
{
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_USB_DEVICE_Init();

    while (1)
    {
        float temperature = readTemperature();
        
        tempData.header = 0xAA;
        tempData.temp_integer = (uint8_t)temperature;
        tempData.temp_fraction = (uint8_t)((temperature - tempData.temp_integer) * 100);
        tempData.checksum = tempData.header ^ tempData.temp_integer ^ tempData.temp_fraction;

        USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&tempData, sizeof(tempData));
        
        HAL_Delay(1000);
    }
}

static void SystemClock_Config(void)
{
    // Configure system clock (use STM32CubeMX generated code)
}

static void MX_GPIO_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    __HAL_RCC_GPIOC_CLK_ENABLE();

    GPIO_InitStruct.Pin = LED_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(LED_GPIO_PORT, &GPIO_InitStruct);
}

static void MX_USB_DEVICE_Init(void)
{
    // USB initialization code (same as before)
}

float readTemperature(void)
{
    // Implement your temperature sensor reading logic here
    static float temp = 25.0;
    temp += 0.1;
    return temp;
}

// Add this function to handle received data
void USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
    uint8_t receivedData;
    USBD_HID_ReceivePacket(pdev);
    receivedData = ((USBD_HID_HandleTypeDef *)pdev->pClassData)->Report_buf[0];

    if (receivedData == 0x01) {
        HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_SET);  // LED ON
    } else if (receivedData == 0x00) {
        HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_RESET);  // LED OFF
    }
}

// Implement other USB callback functions as before
```

Now, let's modify the Python host script to send LED control commands:

```python
import hid
import time
import struct

VID = 0x0483
PID = 0x5750

def find_device():
    device = hid.device()
    try:
        device.open(VID, PID)
        print(f\"Connected to {device.get_manufacturer_string()} {device.get_product_string()}\")
        return device
    except hid.HIDException:
        print(\"Unable to open device\")
        return None

def read_temperature(device):
    try:
        data = device.read(4, timeout=1000)
        
        if data:
            header, temp_integer, temp_fraction, checksum = struct.unpack('BBBB', bytes(data))
            
            if checksum == (header ^ temp_integer ^ temp_fraction):
                temperature = temp_integer + (temp_fraction / 100.0)
                print(f\"Temperature: {temperature:.2f}Â°C\")
            else:
                print(\"Checksum error\")
        else:
            print(\"No data received\")
    except Exception as e:
        print(f\"Error reading data: {str(e)}\")

def send_led_command(device, state):
    command = 0x01 if state else 0x00
    device.write([command])

def main():
    device = find_device()
    if device:
        print(\"Listening for temperature data...\")
        try:
            led_state = False
            while True:
                read_temperature(device)
                
                # Toggle LED every 5 seconds
                if int(time.time()) % 5 == 0:
                    led_state = not led_state
                    send_led_command(device, led_state)
                    print(f\"LED {'ON' if led_state else 'OFF'}\")
                
                time.sleep(1)
        except KeyboardInterrupt:
            print(\"Stopping...\")
        finally:
            device.close()
    else:
        print(\"Device not found\")

if __name__ == \"__main__\":
    main()
```

These modifications do the following:

1. In the STM32 code:
   - We've updated the HID report descriptor to include an output report.
   - We've added LED GPIO initialization.
   - We've implemented the `USBD_HID_DataOut` function to handle received commands and control the LED.

2. In the Python script:
   - We've added a `send_led_command` function to send LED control commands to the device.
   - In the main loop, we toggle the LED state every 5 seconds as an example.

To use this:

1. Update your STM32 project with the modified code. Make sure to adjust the LED pin if necessary (it's set to PC13, which is common for many STM32F103 boards).

2. Compile and flash the new firmware to your STM32 board.

3. Run the updated Python script on your host computer.

The script will now read temperature data and send LED control commands to the STM32 board. The LED on your board should toggle every 5 seconds.

Remember to handle any errors appropriately and ensure your USB device is properly recognized by your operating system."
}
]
